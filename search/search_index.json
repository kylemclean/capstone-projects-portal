{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Capstone Projects Portal Documentation","text":"<p>User Guide</p>"},{"location":"admin-guide/","title":"Admin User Guide","text":""},{"location":"admin-guide/#admin-panel","title":"Admin Panel","text":"<ol> <li>Log into Django admin with an admin account</li> <li>Click any of the 'Portal' models to view them<ol> <li>Set any filters on the right of the list to filter</li> </ol> </li> <li>Bulk Publish/Unpublish<ol> <li>Go to the 'Projects' section of Django Admin</li> <li>Set filters to your liking</li> <li>Check the box next to all projects you wish to publish</li> <li>Click the drop down menu next to 'Action'</li> <li>Select which action you wish to perform</li> <li>Click 'Go' to perform action</li> </ol> </li> </ol>"},{"location":"admin-guide/#import-csv","title":"Import CSV","text":"<ol> <li>Click your icon in the top right corner</li> <li>Select option labeled \u2018Import data\u2019</li> <li>Click 'Choose File' and choose a CSV file to import, or drag and drop CSV file into designated area</li> <li>Click 'Validate'</li> <li>If there are no errors, and the response looks correct to you, click 'Import' to create the data</li> <li>Verify the data was successfully created in the Django admin page</li> </ol> <p>Validating the CSV essentially does a dry run of the import, rolling back any changes made at the end.</p>"},{"location":"admin-guide/#csv-format","title":"CSV Format","text":"<p>Every row in the CSV has the following entities:</p> <ol> <li>A project (<code>Project</code>)</li> <li>A client organization (<code>ClientOrg</code>)</li> <li>A client representative (<code>User</code>)</li> <li>A teaching assistant (<code>User</code>)</li> <li>A student (<code>User</code>)</li> </ol> <p>The columns of the CSV are:</p> <ol> <li><code>project_name</code> - unique, required</li> <li><code>project_year</code> - required</li> <li><code>project_term</code> - required, options are <code>Fall</code>, <code>Winter</code>, <code>Spring</code>, <code>Summer</code></li> <li><code>client_org_name</code> - unique, required</li> <li><code>client_rep_email</code> - unique, required</li> <li><code>client_rep_name</code></li> <li><code>client_rep_github_username</code></li> <li><code>ta_email</code> - unique, required</li> <li><code>ta_name</code></li> <li><code>ta_github_username</code></li> <li><code>student_email</code> - unique, required</li> <li><code>student_name</code></li> <li><code>student_github_username</code></li> </ol> <p>When each row in the CSV is processed, the following happens:</p> <ol> <li>Check the DB for a project with the name <code>project_name</code><ol> <li>If none exists, create a new project with <code>project_name</code>, <code>project_year</code>, <code>project_term</code></li> </ol> </li> <li>Check the DB for a client org with the name <code>client_org_name</code><ol> <li>If none exists, create a new client org with <code>client_org_name</code></li> </ol> </li> <li>Check the DB for a user with the email <code>client_rep_email</code><ol> <li>If none exists, create a user with <code>client_rep_email</code>, <code>client_rep_name</code>, <code>client_rep_github_username</code></li> </ol> </li> <li>Check the DB for a user with the email <code>ta_email</code><ol> <li>If none exists, create a user with <code>ta_email</code>, <code>ta_name</code>, <code>ta_github_username</code></li> </ol> </li> <li>Check the DB for a user with the email <code>student_email</code><ol> <li>If none exists, create a user with <code>student_email</code>, <code>student_name</code>, <code>student_github_username</code></li> </ol> </li> <li>Assign client org to project: <code>project.client_org = client_org</code></li> <li>Assign client rep to client org: <code>client_org.reps.add(rep)</code></li> <li>Assign client rep to project: <code>project.rep = rep</code></li> <li>Assign TA to project: <code>project.ta = ta</code></li> <li>Assign student to project: <code>project.students.add(student)</code></li> </ol>"},{"location":"admin-guide/#sample-csv","title":"Sample CSV","text":"<p>This creates 1 project with 1 client org, 1 client rep, and 6 students.</p> <pre><code>project_name,project_year,project_term,client_org_name,client_rep_email,client_rep_name,client_rep_github_username,ta_email,ta_name,ta_github_username,student_email,student_name,student_github_username\nCMPUT 401 Project Portal,2021,Fall,CMPUT 401,ildar@ualberta.ca,Ildar Akhmetov,,mohayemin@ualberta.ca,Mohayeminul Islam,,wfenton@ualberta.ca,Will Fenton,willfenton\nCMPUT 401 Project Portal,2021,Fall,CMPUT 401,ildar@ualberta.ca,Ildar Akhmetov,,mohayemin@ualberta.ca,Mohayeminul Islam,,aakindel@ualberta.ca,Ayo Akindele,aakindel\nCMPUT 401 Project Portal,2021,Fall,CMPUT 401,ildar@ualberta.ca,Ildar Akhmetov,,mohayemin@ualberta.ca,Mohayeminul Islam,,mclean1@ualberta.ca,Kyle McLean,kylemclean\nCMPUT 401 Project Portal,2021,Fall,CMPUT 401,ildar@ualberta.ca,Ildar Akhmetov,,mohayemin@ualberta.ca,Mohayeminul Islam,,nahmed2@ualberta.ca,Natasha Osmani,osmani2\nCMPUT 401 Project Portal,2021,Fall,CMPUT 401,ildar@ualberta.ca,Ildar Akhmetov,,mohayemin@ualberta.ca,Mohayeminul Islam,,crasta@ualberta.ca,Alisha Crasta,alisha03\nCMPUT 401 Project Portal,2021,Fall,CMPUT 401,ildar@ualberta.ca,Ildar Akhmetov,,mohayemin@ualberta.ca,Mohayeminul Islam,,essilfie@ualberta.ca,Andrews Essilfie,essilfie\n</code></pre>"},{"location":"api/","title":"API Documentation","text":"<p>To read the API documentation, start the backend and go to <code>/api/docs/</code> in a web browser.</p>"},{"location":"deployment/","title":"Deployment","text":"<p>This guide covers how to deploy the Capstone Projects Portal. It is based on this tutorial from DigitalOcean, so if you are running into issues it may be a good resource.</p>"},{"location":"deployment/#assumptions","title":"Assumptions","text":"<p>This guide was written with the following assumptions. If they do not hold, you will likely have to make some modifications to the steps.</p> <ol> <li>The instance is fresh (existing software could interfere)</li> <li>The instance is running Ubuntu 20.04 with an x86 processor (what we tested with)</li> <li>The instance has a public IP and the domain <code>cmput401.ca</code> is setup to point to it.</li> </ol> <p>If you're not using Ubuntu, you will at least have to change any references to the home directory (<code>/home/ubuntu</code>), and likely any <code>apt</code> package manager commands.</p>"},{"location":"deployment/#setup","title":"Setup","text":"<ol> <li>Update software</li> </ol> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt autoremove\n</code></pre> <ol> <li>Install dependencies</li> </ol> <pre><code>sudo apt install python3-dev python3-pip libpq-dev postgresql postgresql-contrib nginx curl npm\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt install python3.11\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"deployment/#initial-deploy","title":"Initial Deploy","text":"<ol> <li>Clone the repository to <code>~/cmput401-portal</code></li> </ol> <pre><code># to clone with SSH, generate an SSH key on your instance and add it as a deploy key in the repo settings\n# otherwise, you can clone with HTTPS using a personal access token\ngit clone git@github.com:UAlberta-CMPUT401/cmput401-portal.git ~/cmput401-portal\n</code></pre> <ol> <li>Install project dependencies</li> </ol> <pre><code>cd ~/cmput401-portal/\n\n# install python dependencies\nuv sync\n\n# install root node packages\nnpm install\n\n# install frontend node packages\ncd frontend/ &amp;&amp; npm install &amp;&amp; cd -\n</code></pre> <ol> <li>Change the password of the default postgres user</li> </ol> <pre><code>sudo -u postgres psql\n\n# save the password for later\npostgres=# \\password postgres\n\n# exit (ctrl+D)\n</code></pre> <ol> <li>Change postgres authentication from peer to    md5 (source)</li> </ol> <pre><code>sudo sed -i 's/peer/md5/' /etc/postgresql/*/main/pg_hba.conf\nsudo service postgresql restart\n</code></pre> <ol> <li>Generate a Django secret key</li> </ol> <pre><code>uv run python -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\"\n</code></pre> <ol> <li>Create the file <code>~/cmput401-portal/backend/.env</code> with the following contents</li> </ol> <pre><code># Name of database to connect to\nPG_CONNECT_DATABASE=postgres\n# Name of user to connect with\nPG_CONNECT_USER=postgres\n# Password of user to connect with\nPG_CONNECT_PASSWORD=&lt;password you set earlier&gt;\n\n# Name of database to create\nPORTAL_DB_DATABASE=portal\n# Name of user to create\nPORTAL_DB_USER=portaluser\n# Password of user to create\nPORTAL_DB_PASSWORD=&lt;new password&gt;\n\nDJANGO_SECRET_KEY=&lt;secret key you generated earlier&gt;\n</code></pre> <ol> <li>Setup the postgres DB</li> </ol> <pre><code>uv run backend/scripts/setup_db.py --reset\n</code></pre> <ol> <li>Setup Django</li> </ol> <pre><code>cd ~/cmput401-portal/backend/\n\n# apply migrations\nuv run manage.py migrate\n\n# create admin account\nuv run manage.py createsuperuser\n\n# collect static files\nuv run manage.py collectstatic\n</code></pre> <ol> <li>Build the website (takes a while)</li> </ol> <pre><code>cd ~/cmput401-portal/frontend/\nnpm run build\n</code></pre> <ol> <li>Create the file <code>/etc/systemd/system/gunicorn.socket</code> as superuser with the following contents</li> </ol> <pre><code>[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=/run/gunicorn.sock\n\n[Install]\nWantedBy=sockets.target\n</code></pre> <ol> <li>Copy the gunicorn service file</li> </ol> <pre><code>sudo cp ~/cmput401-portal/deployment/gunicorn.service /etc/systemd/system/gunicorn.service\n</code></pre> <ol> <li>Start gunicorn</li> </ol> <pre><code>sudo systemctl start gunicorn.socket\nsudo systemctl enable gunicorn.socket\n</code></pre> <ol> <li>Setup nginx</li> </ol> <pre><code># copy portal site config file\nsudo cp ~/cmput401-portal/deployment/portal-site /etc/nginx/sites-available/portal\n\n# enable the site\nsudo ln -s /etc/nginx/sites-available/portal /etc/nginx/sites-enabled\n\n# disable the default nginx site\nsudo rm /etc/nginx/sites-enabled/default\n\nsudo systemctl restart nginx\n</code></pre> <p>Done! \ud83c\udf89\ud83c\udf8a\ud83e\udd73\ud83c\udf7e The site should now be up on cmput401.ca</p>"},{"location":"deployment/#email-setup","title":"Email setup","text":"<p>In order for the portal to be able to send emails, an email account must be configured in the backend.</p> <ol> <li>Add the following to <code>~/cmput401-portal/backend/.env</code></li> </ol> <pre><code># the server domain for your email provider, for example:\n# Gmail = smtp.gmail.com\n# Outlook/Hotmail = smtp-mail.outlook.com\n# Yahoo = smtp.mail.yahoo.com\nEMAIL_HOST=&lt;SMTP server domain&gt;\n\n# the email address of the host email to send from.\nEMAIL_HOST_USER=&lt;email address to send from&gt;\n\n# the password to the account for EMAIL_HOST_USER\nEMAIL_HOST_PASSWORD=&lt;password to EMAIL_HOST_USER account&gt;\n</code></pre> <ol> <li>In the Django admin panel, add an entry to the mailing list table with your email address</li> <li>Submit a project proposal and verify you received an email on the address you added to the mailing list</li> </ol>"},{"location":"deployment/#gmail-only","title":"Gmail only","text":"<p>After setting up the .env file, you must allow the app to access your account.</p> <ol> <li>Login to the gmail account</li> <li>Go to 'Manage your Google Account'</li> <li>Go to 'Security'</li> <li>Option 1 - 2FA is not enabled<ol> <li>Scroll down to 'Less secure app access'</li> <li>Turn on access</li> </ol> </li> <li>Option 2 - 2FA is enabled:<ol> <li>Scroll down to 'Signing in to Google'</li> <li>Click 'App passwords'</li> <li>For 'Select app' select 'Other' and give your app a name.</li> <li>Save the app password somewhere as you won't be able to see it again</li> <li>Use the app password in lieu of the email account's password for <code>EMAIL_HOST_PASSWORD</code></li> </ol> </li> </ol>"},{"location":"deployment/#github-oauth2-authentication-setup","title":"GitHub OAuth2 Authentication setup","text":"<p>To allow users to log in to their portal accounts with GitHub, you must create an OAuth App on GitHub and configure the frontend and backend to use it.</p>"},{"location":"deployment/#steps","title":"Steps","text":"<ol> <li>Register a new OAuth application on GitHub.<ul> <li>The authorization callback URL must be set to the URL of the <code>/login/callback</code> page on the frontend, which is currently <code>http://cmput401.ca/login/callback</code>.</li> </ul> </li> <li>Copy the client ID of the application.</li> <li>Click the Generate a client secret button and copy the client secret.</li> <li>In <code>backend/.env</code>, set the <code>GITHUB_CLIENT_ID</code> and <code>GITHUB_CLIENT_SECRET</code> variables to the appropriate values.</li> <li>In <code>frontend/.env</code>, set the <code>VITE_GITHUB_CLIENT_ID</code> variable to the client ID.</li> </ol> <p>You must redeploy the frontend as it needs to rebuild so that it uses the new <code>VITE_GITHUB_CLIENT_ID</code> value.</p>"},{"location":"deployment/#redeploy","title":"Redeploy","text":"<p>Redeploying is easy, simply run the redeploy script after pulling your changes.</p> <pre><code>cd ~/cmput401-portal/\nsudo ./deployment/redeploy.sh\n</code></pre>"},{"location":"docker-compose-deployment/","title":"Deployment with Docker Compose","text":"<p>An experimental deployment configuration has been created using Docker Compose. Using this configuration, you can easily deploy the Capstone Projects Portal frontend, backend, and database on the same server by running just a few commands.</p> <p>The docker-compose.yml file in the root of this repository contains the configuration. It consists of three services: - <code>db</code>: a PostgreSQL database that stores application data - <code>backend</code>: the backend Django server, running on Gunicorn, which hosts the API and admin panel - <code>caddy</code>: a user-facing Caddy reverse proxy that serves static frontend and backend assets and user uploads, and routes API and admin panel requests to the backend server</p> <p>For more details on deployment, such as setting up emails and GitHub OAuth, see the deployment documentation page.</p>"},{"location":"docker-compose-deployment/#steps-to-deploy","title":"Steps to deploy","text":"<ol> <li> <p>Connect to the server.</p> </li> <li> <p>Ensure that Docker and Docker Compose are installed on the server.</p> </li> <li> <p>Clone the Capstone Projects Portal repository to the server.</p> </li> </ol> <pre><code>git clone https://github.com/open-uofa/capstone-projects-portal.git\n</code></pre> <ol> <li>Switch to the repository directory.</li> </ol> <pre><code>cd capstone-projects-portal\n</code></pre> <ol> <li>Create a <code>.deploy.env</code> file in the repository directory, and populate it with the frontend and backend production environment variables. At minimum, set the following environment variables:</li> </ol> <ul> <li><code>DJANGO_SECRET_KEY</code>: set to a random value according to the documentation. It may be easiest to generate it in your local development environment.</li> <li><code>FRONTEND_BASE_URL</code>: set to the origin the app will be hosted on. For example: https://cmput401.ca</li> </ul> <ol> <li>In the repository directory, build and start the containers.</li> </ol> <pre><code>docker compose --env-file .deploy.env up --build -d\n</code></pre> <ol> <li>To initialize the database, you need to create the appropriate database and user on the PostgreSQL container, and apply the database migrations. You can do this by running the command</li> </ol> <pre><code>docker exec -it portal-backend sh -c \"uv run /app/backend/scripts/setup_db.py &amp;&amp; uv run /app/backend/manage.py migrate\"\n</code></pre> <ol> <li>To create an admin user account, run the command</li> </ol> <pre><code>docker exec -it portal-backend sh -c \"uv run /app/backend/manage.py createsuperuser\"\n</code></pre> <p>and follow the directions.</p> <p>The app should now be running!</p>"},{"location":"docker-compose-deployment/#steps-to-update","title":"Steps to update","text":"<p>To update the deployed app with new changes to the Capstone Project Portal code, follow these steps.</p> <ol> <li> <p>Run <code>git pull</code> to download the new code.</p> </li> <li> <p>Stop the running servers.</p> </li> </ol> <pre><code>docker compose down\n</code></pre> <ol> <li>Rebuild and restart the containers.</li> </ol> <pre><code>docker compose --env-file .deploy.env up --build -d\n</code></pre> <ol> <li>Apply any database migrations.</li> </ol> <pre><code>docker exec -it portal-backend sh -c \"uv run /app/backend/manage.py migrate\"\n</code></pre>"},{"location":"environment-variables/","title":"Backend environment variables","text":"<p>For backend deployment and development environments, the following environment variables should be set. They can be set by creating the file <code>backend/.env</code> and adding the following contents.</p> <p>[!NOTE] In production environments, do not include the variables in the \"DEVELOPMENT VARIABLES\" section.</p> <p>[!IMPORTANT] The <code>DJANGO_SECRET_KEY</code> variable must be set to a random value for the backend to work and be secure. Execute the provided command to generate a suitable value, and put it in between the double-quotes after <code>DJANGO_SECRET_KEY=</code>.</p> <pre><code># Generate a secret key for the backend by running this command:\n#     uv run python -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\"\nDJANGO_SECRET_KEY=\"\"\n\n# The base URL that the frontend will be accessible at.\nFRONTEND_BASE_URL=http://localhost:3000\n\n# These are the PostgreSQL database credentials used for the portal backend.\nPORTAL_DB_DATABASE=portal\nPORTAL_DB_USER=portal\nPORTAL_DB_PASSWORD=portal\nPORTAL_DB_HOST=localhost\nPORTAL_DB_PORT=5432\n\n# If you want GitHub login to work, set these environment variables according\n# to the details for your GitHub OAuth app.\nGITHUB_CLIENT_ID=\nGITHUB_CLIENT_SECRET=\n\n# If you want the backend server to send emails, set these environment variables\n# to the appropriate SMTP credentials.\nEMAIL_HOST=\nEMAIL_HOST_USER=\nEMAIL_HOST_PASSWORD=\n\n# The reset-database script will connect to the PostgreSQL server specified by\n# PORTAL_DB_HOST and PORTAL_DB_PORT and will use the following credentials to\n# create the database and user specified with PORTAL_DB_DATABASE,\n# PORTAL_DB_USER, and PORTAL_DB_PASSWORD.\n#\n# These will also be used as the default database, username, and password\n# for the PostgreSQL container in the Docker Compose production deployment.\nPG_CONNECT_DATABASE=postgres\nPG_CONNECT_USER=postgres\nPG_CONNECT_PASSWORD=postgres\n\n##########################################################################\n##########################################################################\n###                                                                    ###\n###  DEVELOPMENT VARIABLES                                             ###\n###                                                                    ###\n###  The environment variables below are only relevant in development  ###\n###  environments. Remove them in production environments.             ###\n###                                                                    ###\n##########################################################################\n##########################################################################\n\nDJANGO_DEBUG=1\n\n##########################################################################\n##########################################################################\n###                                                                    ###\n###  END DEVELOPMENT VARIABLES                                         ###\n###                                                                    ###\n##########################################################################\n##########################################################################\n</code></pre>"},{"location":"environment-variables/#frontend-environment-variables","title":"Frontend environment variables","text":"<p>For frontend deployment and development environments, the following environment variables should be set. They can be set by creating the file <code>frontend/.env</code> and adding the following contents.</p> <pre><code># The base URL for the backend API.\n# In the development environment, this runs on a separate origin from the frontend -- locally on port 8000.\n# In the recommended production environment, this can be set to /api as it is hosted on the same origin.\nVITE_API_BASE_URL=http://127.0.0.1:8000/api\n\n# The URL for the backend admin panel.\n# In the development environment, this runs on a separate origin from the frontend -- locally on port 8000.\n# In the recommended production environment, this can be set to /admin as it is hosted on the same origin.\nVITE_ADMIN_URL=http://127.0.0.1:8000/admin\n\n# If you want GitHub login to work, set this to the client ID of the GitHub OAuth app.\n# It should be the same as the GITHUB_CLIENT_ID environment variable set on the backend.\nVITE_GITHUB_CLIENT_ID=\n</code></pre>"},{"location":"list-of-all-documents/","title":"All Documents","text":""},{"location":"list-of-all-documents/#planning-documents","title":"Planning Documents","text":"<ul> <li>Project Management</li> <li>Project Requirements</li> <li>Software Design</li> </ul>"},{"location":"list-of-all-documents/#guides","title":"Guides","text":"<ul> <li>User Guide</li> <li>Admin Guide</li> </ul>"},{"location":"list-of-all-documents/#other-documents","title":"Other Documents","text":"<ul> <li>Deployment Documentation</li> <li>Test Documentation</li> <li>API Documentation</li> </ul>"},{"location":"testing/","title":"Test Documentation","text":"<p>Our automated test suite consists of backend and frontend tests.</p>"},{"location":"testing/#backend-tests","title":"Backend tests","text":"<p>The backend tests use Django's test framework to test the functionality of the backend API. They consist of model tests, which test functions on models and how they react to events, as well as view tests, which test how the API's endpoints respond to valid and invalid requests from users.</p> <p>The backend tests are located in the <code>backend/portal/tests</code> directory. They can be run by executing <code>uv run manage.py test</code> in the <code>backend</code> directory.</p>"},{"location":"testing/#frontend-tests","title":"Frontend tests","text":"<p>Our project consists of two types of frontend tests: tests that use Vitest and React Testing Library to test the appearance and functionality of the React components of the site, and end-to-end tests using Playwright to test flows of user interaction with the running frontend.</p> <p>We implemented one end-to-end test using Playwright that tests the flow of logging into an account using GitHub. The passing of these tests helps to show that the frontend implementation of GitHub login is working properly.</p> <p>To run all of the frontend tests, run <code>npm test</code> in the <code>frontend</code> directory.</p> <p>To run only the React Testing Library tests, run <code>npm run test:unit</code>.</p> <p>To run only the end-to-end tests, run <code>npm run test:e2e</code>.</p>"},{"location":"testing/#other-testing","title":"Other testing","text":"<p>In addition to the automated tests, there is a test fixture that is designed to be representative of real-world data. This fixture can be loaded in the database of a development environment, allowing a tester to perform manual tests of the site's functionality, such as the acceptance tests of each user story.</p> <p>The realistic test fixture can be loaded into the database by executing <code>npm run import-dummy-data</code> in the root directory.</p>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#for-all-users","title":"For All Users","text":""},{"location":"user-guide/#access-home-page","title":"Access Home Page","text":"<ol> <li>Click on 'Capstone Projects Portal' logo in the top right corner</li> </ol>"},{"location":"user-guide/#browse-projects","title":"Browse Projects","text":"<ol> <li>Click on 'Browse Projects' tab in navbar</li> <li>To filter projects:<ol> <li>Input keywords into search bar</li> <li>Set filters through drop down menus next to search bar</li> <li>Click arrow to reorganize projects</li> </ol> </li> <li>From ACCESS HOME PAGE:<ol> <li>Browse through select projects for Startups and/or Nonprofits.</li> <li>Scroll down to view projects that are either mobile or web apps.     1. Click arrows on the side to scroll through more projects of that type.</li> <li>Click 'View All' to see all projects of that type.</li> </ol> </li> <li>From VIEW USER PROFILE:<ol> <li>Scroll down to view a user\u2019s projects based on their role.</li> </ol> </li> <li>From VIEW CLIENT:<ol> <li>Scroll down to view all projects for a specific client.</li> </ol> </li> </ol>"},{"location":"user-guide/#view-project","title":"View Project","text":"<ol> <li>From any of the BROWSE PROJECTS options, simply click on the project that interests you to view it\u2019s details.</li> </ol>"},{"location":"user-guide/#share-project","title":"Share Project","text":"<ol> <li>From VIEW PROJECT, click on the icon of the site you wish to share the project to.</li> </ol>"},{"location":"user-guide/#view-user-profile","title":"View User Profile","text":"<ol> <li>From VIEW PROJECT, users are listed based on their role in the project.</li> <li>Click on the avatar of the user that interests you to view their details<ol> <li>If Linkedin icon present:     1. Click to access user\u2019s linkedin profile</li> <li>If World icon present:     1. Click to access user\u2019s website or github</li> </ol> </li> </ol>"},{"location":"user-guide/#browse-clients","title":"Browse Clients","text":"<ol> <li>Click the 'Browse Clients' tab in the navbar</li> <li>To Filter Clients:<ol> <li>Input keywords into search bar</li> <li>Set filters through drop down menus next to search bar</li> <li>Click arrow to reorganize clients</li> </ol> </li> </ol>"},{"location":"user-guide/#view-client","title":"View Client","text":"<ol> <li>From any of the BROWSE CLIENTS options, simply click on the client organization that interests you to view their details</li> </ol>"},{"location":"user-guide/#learn-about-us","title":"Learn About Us","text":"<ol> <li>Click 'About our Work' tab in navbar</li> <li>From ACCESS HOME PAGE:<ol> <li>Scroll down to 'Contributing to our community' section</li> <li>Click on 'Learn About Our Work'</li> </ol> </li> <li>Scroll down to view client testimonials</li> </ol>"},{"location":"user-guide/#submit-a-proposal","title":"Submit a Proposal","text":"<ol> <li>Click on the 'Want us to build you a project?' tab in the navbar</li> <li>From ACCESS HOME PAGE:<ol> <li>Scroll down to 'Contributing to our community' section</li> <li>Click 'Got an idea for a project?'</li> </ol> </li> <li>From BROWSE CLIENTS:<ol> <li>Scroll all the way down to end of page</li> <li>Click 'Submit a Proposal'</li> </ol> </li> <li>Fill out required fields</li> <li>Click 'Submit'</li> <li>Your proposal will be emailed to a representative who will get back to you.</li> </ol>"},{"location":"user-guide/#for-logged-in-users","title":"For Logged in Users","text":""},{"location":"user-guide/#view-your-profile","title":"View Your Profile","text":"<ol> <li>Click your icon in the top right corner</li> <li>Select 'Profile'</li> </ol>"},{"location":"user-guide/#edit-your-profile","title":"Edit Your Profile","text":"<ol> <li>From VIEW YOUR PROFILE, click 'Edit'</li> <li>Fill out required fields</li> <li>To upload profile picture:<ol> <li>Click 'Upload'</li> <li>Select image you wish to upload</li> <li>Click 'Open' or double click desired image</li> </ol> </li> <li>To remove profile picture:<ol> <li>Click trash bin icon by your current icon</li> </ol> </li> <li>Click 'Submit' to save changes</li> </ol>"},{"location":"user-guide/#change-your-password","title":"Change Your Password","text":"<ol> <li>Click your icon in the top right corner</li> <li>Select 'Settings'</li> <li>Click 'Change Password'</li> <li>Input required information and click 'Change Password'</li> </ol>"},{"location":"user-guide/#edit-your-projects","title":"Edit Your Project(s)","text":"<ol> <li>From VIEW YOUR PROFILE, click on the desired project</li> <li>From VIEW PROJECT, click button labeled 'Edit'</li> <li>Fill out required fields</li> <li>To upload screenshot:<ol> <li>Click 'Upload'</li> <li>Select image you wish to upload</li> <li>Click 'Open' or double click desired image</li> </ol> </li> <li>To remove screenshot:<ol> <li>Click on trash bin icon by your current screenshot</li> </ol> </li> <li>Click 'Submit' to save changes</li> </ol>"},{"location":"user-guide/#edit-your-client-organization-info","title":"Edit Your Client Organization Info","text":"<ol> <li>From VIEW YOUR PROFILE, click on the desired project from your 'CLIENT REPRESENTATIVE PROJECTS' category</li> <li>From VIEW PROJECT, click the avatar under the 'CLIENT' section</li> <li>Click 'Edit'</li> <li>Fill out required fields</li> <li>To upload logo image:<ol> <li>Click 'Upload'</li> <li>Select image you wish to upload</li> <li>Click 'Open' or double click desired image</li> </ol> </li> <li>To remove logo:<ol> <li>Click trash bin icon by the current logo image</li> </ol> </li> <li>Click 'Submit' to save changes</li> </ol>"},{"location":"user-guide/#logout","title":"Logout","text":"<ol> <li>Click your icon in the top right corner</li> <li>Select 'Log Out'</li> <li>To log out other sessions:<ol> <li>Click your icon in the top right corner</li> <li>Select 'Settings'</li> <li>Click 'Log out of all other sessions'</li> </ol> </li> </ol>"}]}